package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/miyamo2theppl/bread-app/bread-app-api/graph/model"
	"github.com/miyamo2theppl/bread-app/bread-app-api/internal"
	"github.com/miyamo2theppl/bread-app/bread-app-common/errors"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Breads is the resolver for the breads field.
func (r *queryResolver) Breads(ctx context.Context) ([]*model.Bread, error) {
	res, errs := r.Resolver.BSvc.GetAllBreads()
	for _, err := range errs {
		switch v := err.(type) {
		case errors.BreadAppError:
			graphql.AddError(ctx, &gqlerror.Error{
				Path:    graphql.GetPath(ctx),
				Message: v.Message(),
				Extensions: map[string]interface{}{
					"code": v.Code(),
				},
			})
		default:
			graphql.AddError(ctx, &gqlerror.Error{
				Path:    graphql.GetPath(ctx),
				Message: v.Error(),
			})
		}
	}

	return res, nil
}

// Bread is the resolver for the bread field.
func (r *queryResolver) Bread(ctx context.Context, id string) (*model.Bread, error) {
	res, err := r.Resolver.BSvc.GetBreadById(id)

	if err != nil {
		switch v := err.(type) {
		case errors.BreadAppError:
			graphql.AddError(ctx, &gqlerror.Error{
				Path:    graphql.GetPath(ctx),
				Message: v.Message(),
				Extensions: map[string]interface{}{
					"code": v.Code(),
				},
			})
			return nil, nil
		default:
			return nil, err
		}
	}

	return res, nil
}

// Query returns internal.QueryResolver implementation.
func (r *Resolver) Query() internal.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
